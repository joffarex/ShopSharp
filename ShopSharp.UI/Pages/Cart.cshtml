@page
@model CartModel

@{
    Layout = "Shared/_Layout";
}

<div class="section">
    <div class="columns">
        <div class="column is-10 is-offset-1">
            @if (Model.Cart.Count() == 0)
            {
                <p>No Items in Cart</p>
            }
            else
            {
                @foreach (var product in Model.Cart)
                {
                    <div class="level" id="product-@product.StockId">
                        <div class="level-item">
                            <figure class="image is-128x128">
                                <img src="~/images/product-image.jpg" alt="Product image">
                            </figure>
                        </div>
                        <div class="level-item">
                            <p class="title has-text-primary">@product.Name</p>
                        </div>
                        <div class="level-item">
                            <div class="columns is-gapless is-mobile is-multiline has-text-centered">
                                <div class="column is-4">
                                    <button
                                        class="button"
                                        type="submit"
                                        onclick="removeOneFromCart(event)"
                                        data-stock-id="@product.StockId">
                                        -
                                    </button>
                                </div>
                                <div class="column is-4 align-self-center" id="stock-@product.StockId">
                                    @product.Quantity
                                </div>
                                <div class="column is-4">
                                    <button
                                        class="button"
                                        type="submit"
                                        onclick="addOneToCart(event)"
                                        data-stock-id="@product.StockId">
                                        +
                                    </button>
                                </div>
                                <div class="column is-12">
                                    <a class="has-text-danger"
                                       onclick="removeAllFromCart(event)"
                                       data-stock-id="@product.StockId">
                                        Remove
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="level-item">
                            <p>Size: @product.StockId</p>
                        </div>
                        <div class="level-item" id="product-value-@product.StockId">
                            <p>Price: @product.Value</p>
                        </div>
                    </div>
                }
            }

            <div class="has-text-right">
                <a asp-page="/Index" class="button is-text">Return To Shop</a>
                @if (Model.Cart.Count() != 0)
                {
                    <a asp-page="/Checkout/CustomerInformation" class="button is-success">
                        <p>Checkout <span id="total-value"> @Model.TotalValue</span></p>
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const addOneToCart = function (event) {
            const stockId = event.target.dataset.stockId;
            
            axios.post(`/Cart/AddOne/${stockId}`)
                .then(res => {
                    console.log(res.data);
                    let el = document.getElementById(`stock-${stockId}`);
                    
                    let quantity = Number(el.innerText);
                    el.innerText = (quantity + 1);
                    updateTotalValue(stockId, 'add');
                })
                .catch(err => {
                    console.error(err);
                    alert(err.message);
                });
        };
        
        const removeOneFromCart = function (event) {
            const stockId = event.target.dataset.stockId;
            
            axios.post(`/Cart/RemoveOne/${stockId}`)
                .then(res => {
                    console.log(res.data);
                    let el = document.getElementById(`stock-${stockId}`);
                                        
                    let quantity = Number(el.innerText);
                    el.innerText = (quantity - 1);
                    updateTotalValue(stockId, 'remove');
                })
                .catch(err => {
                    console.error(err);
                    alert(err.message);
                });
        };
        
        const removeAllFromCart = function (event) {
            const stockId = event.target.dataset.stockId;
            
            axios.post(`/Cart/RemoveAll/${stockId}`)
                .then(res => {
                    console.log(res.data);
                    let el = document.getElementById(`product-${stockId}`);
                    let value = document.getElementById(`product-value-${stockId}`).innerText.split('$')[1];
                    let quantity = document.getElementById(`stock-${stockId}`).innerText;
                    
                    let totalValue = Number(value) * Number(quantity);
                    
                    el.outerHTML = "";
                    updateTotalValue(stockId, 'removeAll', totalValue);
                })
                .catch(err => {
                    console.error(err);
                    alert(err.message);
                });
        };
        
        const updateTotalValue = function (stockId, type, removeAllTotalValue = null) {
            let value;
            if (removeAllTotalValue === null) { 
                value = document.getElementById(`product-value-${stockId}`).innerText.split('$')[1];
            } else {
                value = removeAllTotalValue.toFixed(2);
            }
            
            let el = document.getElementById('total-value');
            let totalValue = Number(el.innerText.substr(1));
            switch (type) {
                case 'remove':
                    el.innerText = `$${(totalValue - Number(value)).toFixed(2)}`;
                    break;
                case 'add':
                    el.innerText = `$${(totalValue + Number(value)).toFixed(2)}`;
                    break;
                case 'removeAll':
                    const displayValue = (totalValue - Number(value)).toFixed(2);
                    el.innerText = `$${displayValue}`;
                    break;
                default:
                    break;
            }
        };
    </script>
}